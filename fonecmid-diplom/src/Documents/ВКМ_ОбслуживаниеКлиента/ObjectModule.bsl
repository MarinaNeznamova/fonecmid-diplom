#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)  
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ВидДоговора");
	Если Не ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.АбонентскоеОбслуживание Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Проведение не возможно, вид договора %1, а должен быть ""Абонентская плата""", ВидДоговора));
		Отказ = Истина; 
		Возврат;
	КонецЕсли;	
	Начало = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВКМ_ДатаНачалаДействияДоговора");
	Если Начало > Дата Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Проведение не возможно, дата документа:%1 меньше даты начала действия договора:%2", Дата, Начало));
		Отказ = Истина; 
		Возврат;
	КонецЕсли;	 
	
	Окончание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВКМ_ДатаОкончанияДействияДоговора");
	Если Окончание < Дата Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Проведение не возможно, дата документа:%1 больше даты окончания действия договора:%2", Дата, Окончание));
		Отказ = Истина; 
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка КАК Ссылка,
	|	СУММА(ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.ЧасыКОплатеКлиенту) КАК ЧасыКОплатеКлиенту
	|ПОМЕСТИТЬ ВТ_Часы
	|ИЗ
	|	Документ.ВКМ_ОбслуживаниеКлиента.ВыполненныеРаботы КАК ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы
	|ГДЕ
	|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_СтоимостьЧасаРаботы КАК ДоговорВКМ_СтоимостьЧасаРаботы,
	|	ВТ_Часы.ЧасыКОплатеКлиенту КАК ЧасыКОплатеКлиенту,
	|	ВКМ_ОбслуживаниеКлиента.Специалист КАК Специалист,
	|	ЕСТЬNULL(ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот, -1) КАК ПроцентОтРабот
	|ИЗ
	|	ВТ_Часы КАК ВТ_Часы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(
	|					&Дата,
	|					ПроцентОтРабот >= 0
	|						И Сотрудник В
	|							(ВЫБРАТЬ
	|								ВКМ_ОбслуживаниеКлиента.Специалист КАК Специалист
	|							ИЗ
	|								Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
	|							ГДЕ
	|								ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка)) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
	|			ПО ВКМ_ОбслуживаниеКлиента.Специалист = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник
	|		ПО ВТ_Часы.Ссылка = ВКМ_ОбслуживаниеКлиента.Ссылка
	|ГДЕ
	|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка
	|	И ВКМ_ОбслуживаниеКлиента.Дата МЕЖДУ ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_ДатаНачалаДействияДоговора И ВКМ_ОбслуживаниеКлиента.Договор.ВКМ_ДатаокончанияДействияДоговора
	|	И ВКМ_ОбслуживаниеКлиента.Договор.ВидДоговора = &ВидДоговора";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);     
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.АбонентскоеОбслуживание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// регистр ВКМ_ВыполненныеКлиентуРаботы Расход
		Если ВыборкаДетальныеЗаписи.ПроцентОтРабот >=0 Тогда
			Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Клиент = Клиент;
			Движение.Договор = Договор;
			Движение.КоличествоЧасов = ВыборкаДетальныеЗаписи.ЧасыКОплатеКлиенту;
			Движение.СуммаКОплате = ВыборкаДетальныеЗаписи.ЧасыКОплатеКлиенту*ВыборкаДетальныеЗаписи.ДоговорВКМ_СтоимостьЧасаРаботы;  
			
			// регистр ВКМ_ВыполненныеСотрудникомРаботы 
			Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
			Движение.Период = Дата;
			Движение.Сотрудник = Специалист;
			Движение.ЧасовКОплате = ВыборкаДетальныеЗаписи.ЧасыКОплатеКлиенту;
			Движение.СуммаКОплате = ВыборкаДетальныеЗаписи.ЧасыКОплатеКлиенту*ВыборкаДетальныеЗаписи.ДоговорВКМ_СтоимостьЧасаРаботы*ВыборкаДетальныеЗаписи.ПроцентОтРабот/100; 
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Проведение не возможно, Специалисту не установлен процент премии"));
			Отказ = Истина; 
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	
	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

Процедура ТГСообщение() Экспорт 
	Если ЗначениеЗаполнено(Клиент) И ЗначениеЗаполнено(Специалист) И ЗначениеЗаполнено(ОписаниеПроблемы) И ЗначениеЗаполнено(ДатаПроведенияРабот) И ЗначениеЗаполнено(ВремяНачалаРаботПлан) И ЗначениеЗаполнено(ВремяОкончанияРаботПлан) Тогда
		СообщениеТелеграм = СтрШаблон("Контрагент:%1; Специалист:%2; Проблема:%3; Дата:%4; Время %5-%6.", 
		Клиент, Специалист, ОписаниеПроблемы, Формат(ДатаПроведенияРабот, "ДФ=dd.MM.yyyy"), Формат(ВремяНачалаРаботПлан, "ДФ=ЧЧ:мм:сс"), Формат(ВремяОкончанияРаботПлан, "ДФ=ЧЧ:мм:сс"));
		НайденныйОбъект = Справочники.ВКМ_УведомленияТелеграмБоту.НайтиПоРеквизиту("ПоДокументу", Ссылка);
		Если НайденныйОбъект = Справочники.ВКМ_УведомленияТелеграмБоту.ПустаяСсылка() Тогда
			НовыйОбъект = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НовыйОбъект.Заполнить(Неопределено); 
			НовыйОбъект.ТекстСообщения = СообщениеТелеграм; 
			НовыйОбъект.ПоДокументу = Ссылка;
			НовыйОбъект.Записать(); 
		Иначе 
			
			ИзменяемТекст = НайденныйОбъект.ПолучитьОбъект(); 
			ИзменяемТекст.ТекстСообщения =  СообщениеТелеграм;
			ИзменяемТекст.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
 
	ТГСообщение();

КонецПроцедуры

#КонецОбласти

#КонецЕсли

